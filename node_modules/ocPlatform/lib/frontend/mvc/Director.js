var Class = require("ocClass/lib/Class.js") ;
var View = require("ocPlatform/lib/frontend/mvc/View.js") ;
var Switch = require("ocPlatform/lib/frontend/mvc/Switch.js") ;
var Nut = require("ocPlatform/lib/mvc/controller/Nut.js") ;

var Director = module.exports = Class.extend({

	ctor: function($document)
	{
		this.$document = $document || $(document) ;
		this._request = null ;
	}

	, setup: function()
	{
		var director = this ;

		// for link(a tag)
		this.$document.on("click","a[direct]",function(){

			var opt = director.preprocDirect(this) ;

			director.request(
				{
					url: $(this).attr("href")
					, success: function(err,nut)
					{
						if(err)
						{
							throw err ;
						}
						director.fitNut(nut,opt.target) ;
					}
				}
				, opt.uselayout
				, opt.pushHistory
			) ;

			// 取消浏览器默认行为
			return false ;
		}) ;

		// for form
		this.$document.on("submit","form[direct]",function(){

			var opt = director.preprocDirect(this) ;

			director.requestForm(this,function(err,nut){
				if(err)
				{
					throw err ;
				}
				director.fitNut(nut,opt.target) ;
			},opt.uselayout,opt.pushHistory) ;

			// 取消浏览器默认行为
			return false ;
		}) ;


		// state 事件
		window.onpopstate = function(e) {
			console.log(e.state);

			if(e.state)
			{
				director.request({
					url: e.state.url
					, data: e.state.data || {}
					, success: function(err,nut)
					{
						if(err)
						{
							throw err ;
						}

						var view = $(".ocview:not(.oclayout)")[0] ;
						if(view)
						{
							director.fitNut(nut,view) ;
						}
					}
				}) ;
			}
		} ;
		//
		if( window.history.replaceState )
		{
			window.history.replaceState({
				url: location.pathname
				, data: queryStrings(location.search)
			}) ;
		}
	}

	, preprocDirect: function(ele,data)
	{
		var direct = $(ele).attr("direct") || "lazy" ;
		switch(direct)
		{
			case 'view' :
				var view = $(ele).parents(".ocview")[0] ;
				return {
					target: view
					, uselayout: false
					, pushHistory: $(view).parents(".ocview").eq(0).hasClass("oclayout")
				}

			case 'top' :
				return {
					target: $($(ele).parents(".oclayout")[0])
						.find(".ocview")[0]
					, uselayout: false
					, pushHistory: true
				}


			case 'lazy' :
			default :
				return {
					target: null
					, uselayout: true
					, pushHistory: true
				}
		}
	}

	, request: function(ajaxOptions,layout,history)
	{
		var director = this ;

		var ajax = ajaxOptions || {} ;
		ajax.dataType = 'json' ;
		ajax.beforeSend = function(req)
		{
			// 一次只请求一个视图
			if(director._request)
			{
				director._request.abort() ;
			}

			// this time
			director._request = req ;
		} ;

		ajax.data = ajax.data || {} ;

		if(!layout)
		{
			ajax.data["@layout"] = false ;
		}

		// sumsign
		if( ajax.data["@layout"]!==false )
		{
			ajax.data["@sumsigns"] = [] ;
			$("[sumsign]").each(function(){
				ajax.data["@sumsigns"].push( $(this).attr("sumsign") ) ;
			}) ;
		}

		ajax.data["@render"] = false ;

		var callback = ajax.success ;
		ajax.success = function(nut)
		{
			// 请求成功后，增加历史记录
			if( history )
			{
				window.history.pushState && window.history.pushState(
					{
						url: ajax.url
						, data: ajax.data
						, type: ajax.type
					}
					, null
					, ajax.url
				) ;
			}

			Nut.restore(nut,function(err,nut){

				callback && callback(err,nut) ;

				if(err)
				{
					throw err ;
				}
			}) ;
		}


		return $.ajax(ajax) ;
	}

	, requestAndSwitch: function(ajax,target)
	{
		var director = this ;
		var callback = ajax.success ;

		ajax.success = function(err,nut){

			if(err)
			{
				throw err ;
			}

			director.fitNut(nut,target,callback) ;
		}

		return this.request(ajax) ;
	}
	, requestForm: function(eleForm,callback,uselayout)
	{
		if(!eleForm)
		{
			throw new Error("Director.requestForm() 参数 eleForm 必须为有效的 form 元素。") ;
			return ;
		}

		var ajax = {
			url: $(eleForm).attr("action")
			, data: {}
			, type: $(eleForm).attr("method") || "GET"
			, contentType: $(eleForm).attr("enctype") || "application/x-www-form-urlencoded"
			, success: callback
		}

		$.each($(eleForm).serializeArray(),function(i,ipt){
			ajax.data[ipt.name] = ipt.value ;
		}) ;

		this.request( ajax, uselayout ) ;
	}


	/**
	 * 这是一个很牛的函数，它能把服务器返回的 nut ，合理应用到当前视图环境中，不需要你处理任何细节
	 */
	, fitNut: function(nut,target,callback)
	{
		if( !target )
		{
			target = (function findAvailLayout( nut )
			{
				if( nut._children && nut._children.layout )
				{
					var $layout = $("[sumsign="+nut._children.layout.model['$sumsign']+"]") ;
					// bingo !
					if( $layout.length )
					{
						delete nut._children.layout ;

						// just here !
						return $layout.find(".ocview")[0] ;
					}
					else
					{
						return findAvailLayout(nut._children.layout) ;
					}
				}

				return null ;
			}) (nut) ;
		}

		if(!target)
		{
			// 最上层的 ocview
			target = $(".ocview")[0] ;
		}

		// 剥开果壳 :)
		nut.crack(function(err,html){
			if(err)
			{
				console.log(err.message) ;
				console.log(err.stack) ;
				return ;
			}

			// 导入 css
			var assets = nut.view.assets ;
			for(var i=0;i<assets.css.length;i++)
			{
				var selector = "link[href='"+assets.css[i]+"']" ;
				console.log(selector) ;
				if( !$(selector).length )
				{
					$(document.head).append('<link type="text/css" href="'+assets.css[i]+'" rel="stylesheet">') ;
				}
			}

			// 创建视图
			var $view = $(html,document.ownerDocument) ;
			View.buildView($view[0]) ;

			// 切换试图
			Switch.replacein($view[0],target,callback) ;
		}) ;
	}
},{


}) ;


var queryStrings=function(query) {
	var params=query,reg=/(?:^\?|&)(.*?)=(.*?)(?=&|$)/g,temp,args={};
	while((temp=reg.exec(params))!=null) args[temp[1]]=decodeURIComponent(temp[2]);
	return args;
};
