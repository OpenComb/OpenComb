var Class = require("ocClass/lib/Class.js") ;
var View = require("ocPlatform/lib/frontend/mvc/View.js") ;
var Switch = require("ocPlatform/lib/frontend/mvc/Switch.js") ;
var Nut = require("ocPlatform/lib/mvc/Nut.js") ;

var Director = module.exports = Class.extend({

	ctor: function($document)
	{
		this.$document = $document || $(document) ;
		this._request = null ;
	}

	, setup: function()
	{
		var director = this ;

		// for link(a tag)
		this.$document.on("click","a[direct]",function(){

			var opt = director.preprocDirect(this) ;

			director.request(
				$(this).attr("href")
				, {
					success: function(err,nut)
					{
						if(err)
						{
							throw err ;
						}
						director.fitNut(nut,opt.target) ;
					}
				}
				, opt.uselayout
			) ;

			// 取消浏览器默认行为
			return false ;
		}) ;

		// for form
		this.$document.on("submit","form[direct]",function(){

			var opt = director.preprocDirect(this) ;

			director.requestForm(this,function(err,nut){
				if(err)
				{
					throw err ;
				}
				director.fitNut(nut,opt.target) ;
			},opt.uselayout) ;

			// 取消浏览器默认行为
			return false ;
		}) ;

	}

	, preprocDirect: function(ele,data)
	{
		var direct = $(ele).attr("direct") || "lazy" ;
		switch(direct)
		{
			case 'view' :
				return {
					target: $(ele).parents(".ocview")[0]
					, uselayout: false
				}

			case 'top' :
				return {
					target: $($(ele).parents(".oclayout")[0])
						.find(".ocview")[0]
					, uselayout: false
				}


			case 'lazy' :
			default :
				return {
					target: null
					, uselayout: true
				}
		}
	}

	, request: function(url,ajaxOptions,layout)
	{
		var director = this ;

		var ajax = ajaxOptions || {} ;
		ajax.dataType = 'json' ;
		ajax.beforeSend = function(req)
		{
			// 一次只请求一个视图
			if(director._request)
			{
				director._request.abort() ;
			}

			// this time
			director._request = req ;
		} ;

		ajax.url = url ;
		if( !/^(http|\/)/.test(ajax.url) )
		{
			ajax.url = '/' + ajax.url ;
		}

		ajax.data = ajax.data || {} ;

		if(!layout)
		{
			ajax.data["@layout"] = false ;
		}

		// sumsign
		if( ajax.data["@layout"]!==false )
		{
			ajax.data["@sumsigns"] = [] ;
			$("[sumsign]").each(function(){
				ajax.data["@sumsigns"].push( $(this).attr("sumsign") ) ;
			}) ;
		}

		ajax.data["@render"] = false ;

		var callback = ajax.success ;
		ajax.success = function(nut)
		{
			Nut.restore(nut,function(err,nut){

				callback && callback(err,nut) ;

				if(err)
				{
					throw err ;
				}
			}) ;
		}

		return $.ajax(ajax) ;
	}

	, requestAndSwitch: function(controller,data,target,ajaxOptions)
	{

	}
	, requestForm: function(eleForm,callback,uselayout)
	{
		var ajax = {
			data: {}
			, type: $(eleForm).attr("method") || "GET"
			, contentType: $(eleForm).attr("enctype") || "application/x-www-form-urlencoded"
			, success: callback
		}
		
		$.each($(eleForm).serializeArray(),function(i,ipt){
			ajax.data[ipt.name] = ipt.value ;
		}) ;

		this.request( $(eleForm).attr("action"), ajax, uselayout ) ;
	}


	/**
	 * 这是一个很牛的函数，它能把服务器返回的 nut ，合理应用到当前视图环境中，不需要你处理任何细节
	 */
	, fitNut: function(nut,target)
	{
		if( !target )
		{
			target = (function findAvailLayout( nut )
			{
				if( nut._children && nut._children.layout )
				{
					var $layout = $("[sumsign="+nut._children.layout.model['$sumsign']+"]") ;
					// bingo !
					if( $layout.length )
					{
						delete nut._children.layout ;

						// just here !
						return $layout.find(".ocview")[0] ;
					}
					else
					{
						return findAvailLayout(nut._children.layout) ;
					}
				}

				return null ;
			}) (nut) ;
		}

		if(!target)
		{
			// 最上层的 ocview
			target = $(".ocview")[0] ;
		}

		// 剥开果壳 :)
		nut.crack(function(err,html){
			if(err)
			{
				throw err ;
			}

			console.log(html) ;

			// 创建视图
			var $view = $(html) ;
			View.buildView($view[0]) ;

			// 切换试图
			Switch.replacein($view[0],target) ;
		}) ;
	}
},{


}) ;


