
var MessageQueue = require("./MessageQueue.js") ;
var View = require("./view/View.js") ;
var ResourcePool = require("ocPlatform/lib/mvc/view/ResourcePool.js") ;

var Output = module.exports = function(controller,rsp)
{
	this.rsp = rsp ;
	this.view = controller.view?
		controller.view.createRenderContext():
		View.createNullContext()
	this.model = this.view.model ;
	this.model.$controllerpath = controller.constructor.pathname ;

	this._children = {} ;

	this._msgqueue = null ;
}

Output.prototype.message = function(sentence,args,type,title)
{
	if(!this._msgqueue)
	{
		this._msgqueue = new MessageQueue ;
	}

	this._msgqueue.createMessage(sentence,args,type,title) ;
}

Output.prototype.assembleView = function(resourcepool)
{
	// 共享 resourcepool
	this.view.resourcepool = resourcepool || new ResourcePool ;

	// layout
	if(this._children.layout)
	{
		// 建立关系
		this._children.layout.view._children["*"] = this.view ;

		// 递归
		rootView = this._children.layout.assembleView(this.resourcepool) ;
	}
	else
	{
		var rootView = this.view ;
	}

	// children
	for(var name in this._children)
	{
		if(name=="layout")
		{
			continue ;
		}

		// 建立关系
		this.view._children[name] = this._children[name].view ;

		// 递归
		this._children[name].assembleView(this.resourcepool) ;
	}

	return rootView ;
}

/**
 * 清理多余的引用，为输出到前端做准备
 */
Output.prototype.cleanup = function()
{
	this.rsp = undefined ;
	this.view.cleanup() ;
	this._msgqueue = null ;

	for(var name in this._children)
	{
		this._children[name].cleanup() ;
	}
}

/**
 *
 */
Output.prototype.release = function()
{
	this.rsp = null ;
	this.model = null ;
	this.view.release() ;

	for(var name in this._children)
	{
		this._children[name].release() ;
		this._children[name] = null ;
	}
	this._children = null ;
}

var FrontendViewTemplate = require("ocPlatform/lib/frontend/mvc/ViewTemplate.js") ;

/**
 * 从 json 还原回 Output对象
 * 在 frontend 调用
 */
Output.restore = function(output,callback)
{
	output.assembleView = Output.prototype.assembleView ;
	output.release = Output.prototype.release ;
	output.cleanup = Output.prototype.cleanup ;
	output.constructor = Output ;

	var childNames = [] ;
	for(var name in output._children)
	{
		childNames.push(name) ;
	}

	(function processChild(err,child){
		if(err)
		{
			callback(err,output) ;
		}

		// all children 已完成
		else if( !childNames.length )
		{
			// 加载自己的视图
			if(output.view.tpl)
			{
				FrontendViewTemplate.Caches.singleton.load(output.view.tpl,function(err,tpl){
					if(!err)
					{
						output.view = tpl.createRenderContext() ;
						output.view.model = output.model ;
					}
					callback(err,output) ;
				}) ;
			}
			else
			{
				callback(null,output) ;
			}
		}

		// process a child
		else
		{
			var name = childNames.shift() ;
			Output.restore(output._children[name],processChild) ;
		}
	}) () ;
}


Output.prototype.write = function(content)
{
	this.view.buff.write(content) ;
}

Output.prototype._render = function(callback)
{
	// wrapper
	this.view.buff.write( this.view.createWrapperHead('div'), undefined, true ) ;

	if( this._msgqueue )
	{
		for(var i=0;i<this._msgqueue.length;i++)
		{
			this.view.buff.write( this._msgqueue[i].toBootstrap() + "\r\n" ) ;
		}
	}

	var output = this ;
	this.view.render(function(err){

		if(err)
		{
			callback(err,output.view) ;
			return ;
		}

		// wrapper end tag
		output.view.buff.write( "</div>" ) ;

		// 组装未被 <view > 引用的视图
		for(var name in output.view._children)
		{
			output.view.buff.write(output.view._children[name].buff,"unuse") ;
		}

		// 陆续执行各个子控制器的渲染
		var name, childNames = Object.keys(output._children) ;
		(function step(err){
			if(err)
			{
				callback(err,output._children[name]) ;
				return ;
			}
			if(!(name=childNames.shift()))
			{
				callback(null,output) ;
				return ;
			}
			output._children[name]._render(step) ;
		}) () ;
	}) ;
}

Output.prototype.out = function(destroy)
{
	this.rsp.wait() ;
	var output = this ;

	// 装配视图
	var rootview = output.assembleView() ;

	// 加载 webpage document template
	View.Caches.singleton.load("ocPlatform/templates/WebPage.html",null,function(err,webpage){

		if(err)
		{
			output.rsp.statusCode = "500" ;
			output.rsp.end() ;

			output.release() ;
			return ;
		}

		// 创建 webpage document render context
		var webpagectx = webpage.createRenderContext() ;
		webpagectx._children["*"] = rootview ;
		webpagectx.resourcepool = output.view.resourcepool ;

		// 渲染 webpage document template
		webpagectx.render(function(err){

			// 开始渲染试图
			output._render(function(){

				// 输出
				output.rsp.write( webpagectx.buff.toString() ) ;
				output.rsp.end() ;

				if(destroy)
				{
					output.release() ;
				}

			})

		}) ;
	}) ;
}
Output.prototype.outRaw = function(destroy)
{
	this.cleanup() ;

	this.rsp.setHeader("Content-Type","application/javascript") ;
	this.rsp.write( JSON.stringify(this) ) ;
	this.rsp.end() ;

	if(destroy)
	{
		this.release() ;
	}
}