
var MessageQueue = require("./../MessageQueue.js") ;
var View = require("./../view/View.js") ;
var ResourcePool = require("ocPlatform/lib/mvc/view/ResourcePool.js") ;

var Nut = module.exports = function(controller)
{
	// view and model
	this.view = null ;
	this.view = controller.view?
		controller.view.createRenderContext():
		View.createNullContext() ;
	this.model = this.view.model ;
	this.model.$controllerpath = controller.constructor.pathname ;

	// this is message queue
	this.msgqueue = null ;

	this._children = {} ;
}

Nut.prototype.message = function(sentence,args,type,title)
{
	if(!this.msgqueue)
	{
		this.msgqueue = new MessageQueue ;
	}

	this.msgqueue.createMessage(sentence,args,type,title) ;
}

Nut.prototype.assembleView = function(resourcepool)
{
	// 共享 resourcepool
	this.view.resourcepool = resourcepool || new ResourcePool ;

	// layout
	if(this._children.layout)
	{
		// 建立关系
		this._children.layout.view._children["*"] = this.view ;

		// 递归
		rootView = this._children.layout.assembleView(this.resourcepool) ;
	}
	else
	{
		var rootView = this.view ;
	}

	// children
	for(var name in this._children)
	{
		if(name=="layout")
		{
			continue ;
		}

		// 建立关系
		this.view._children[name] = this._children[name].view ;

		// 递归
		this._children[name].assembleView(this.resourcepool) ;
	}

	return rootView ;
}

/**
 * 清理多余的引用，为输出到前端做准备
 */
Nut.prototype.cleanup = function()
{
	this._buff = this.view.buff.toString() ;
	this.view.cleanup() ;

	for(var name in this._children)
	{
		this._children[name].cleanup() ;
	}

	return this ;
}

/**
 *
 */
Nut.prototype.destroy = function()
{
	this.model = null ;
	this.buff = null ;
	this.view.destroy() ;

	for(var name in this._children)
	{
		this._children[name].destroy() ;
		this._children[name] = null ;
	}
	this._children = null ;
}

var FrontendViewTemplate = require("ocPlatform/lib/frontend/mvc/ViewTemplate.js") ;

/**
 * 从 json 还原回 Nut对象
 * 在 frontend 调用
 */
Nut.restore = function(nut,callback)
{
	nut.__proto__ = Nut.prototype ;

	if(nut.msgqueue)
	{
		MessageQueue.restore(nut.msgqueue) ;
	}

	var childNames = Object.keys(nut._children) ;

	(function processChild(err,child){
		if(err)
		{
			callback(err,nut) ;
		}

		// all children 已完成
		else if( !childNames.length )
		{
			// 加载自己的视图
			if(nut.view.tpl)
			{
				FrontendViewTemplate.Caches.singleton.load(nut.view.tpl,function(err,tpl){
					if(!err)
					{
						nut.view = tpl.createRenderContext() ;
						nut.view.model = nut.model ;
						nut.view.buff.write(nut._buff||'') ;
					}
					callback(err,nut) ;
				}) ;
			}
			else
			{
				nut.view = View.createNullContext() ;
				nut.view.model = nut.model ;
				nut.view.buff.write(nut._buff||'') ;
				callback(null,nut) ;
			}
		}

		// process a child
		else
		{
			var name = childNames.shift() ;
			Nut.restore(nut._children[name],processChild) ;
		}
	}) () ;
}

Nut.prototype.write = function(content)
{
	this.view.buff.write(content) ;
}

Nut.prototype.render = function(callback)
{
	// wrapper head tag
	this.view.buff.write( this.view.createWrapperHead('div'), undefined, true ) ;

	// message queue
	if( this.msgqueue )
	{
		for(var i=0;i<this.msgqueue.length;i++)
		{
			this.view.buff.write( this.msgqueue[i].toBootstrap() + "\r\n" ) ;
		}
	}

	var nut = this ;
	this.view.render(function(err){

		if(err)
		{
			callback(err,nut.view) ;
			return ;
		}

		// 组装未被 <view > 引用的视图
		for(var name in nut.view._children)
		{
			nut.view.buff.write(nut.view._children[name].buff,"unuse") ;
		}

		// wrapper end tag
		nut.view.buff.write( "</div>" ) ;

		// 陆续执行各个子控制器的渲染
		var name, childNames = Object.keys(nut._children) ;
		(function step(err){
			if(err)
			{
				callback(err) ;
				return ;
			}
			if(!(name=childNames.shift()))
			{
				callback(null,nut) ;
				return ;
			}
			nut._children[name].render(step) ;
		}) () ;
	}) ;
}

/**
 * 这个函数很有用，“剥开果壳，得到甜蜜的果肉”
 */
Nut.prototype.crack = function(callback,inWebpage)
{
	var nut = this ;

	// 装配视图
	var rootview = nut.assembleView() ;

	if(inWebpage)
	{
		// 加载 webpage document template
		View.Caches.singleton.load("ocPlatform/templates/WebPage.html",null,function(err,webpage){

			if(err)
			{
				callback(err,'') ;
				return ;
			}

			// 创建 webpage document render context
			var webpagectx = webpage.createRenderContext() ;
			webpagectx._children["*"] = rootview ;
			webpagectx.resourcepool = nut.view.resourcepool ;

			// 渲染 webpage document template
			webpagectx.render(function(err){

				// 开始渲染试图
				nut.render(function(err){
					callback(err,webpagectx.buff.toString()) ;
				})

			}) ;
		}) ;
	}

	else
	{
		// 开始渲染试图
		this.render(function(err){
			callback(err,rootview.buff.toString()) ;
		})
	}
}
