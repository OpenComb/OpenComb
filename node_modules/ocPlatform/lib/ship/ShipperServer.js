var url = require("url") ;
var fs = require("fs") ;
var _pt = require("path") ;
var querystring = require("querystring") ;
var utilarr = require("ocPlatform/lib/util/array.js") ;
var View = require("ocPlatform/lib/mvc/view/View.js") ;

var ShipperServer = module.exports = function(){
	this._arrAllowPatterns = [] ;
	this._arrAllowFolders = [] ;
	this._caches = new Caches() ;
}


module.exports.prototype.connect_middleware = function(req,rspn,next){

	var urlInfo = url.parse(req.url) ;
	if( urlInfo.pathname.substr(0,10)=="/shipdown/" )
	{
		var path = urlInfo.pathname.substr(10) ;
		var fullpath = require.resolve(path) ;

		var query = querystring.parse(urlInfo.query) ;
		var callwrapper = query.wrapper || "$shipper.downloaded($err,$path,$deps,$define)" ;

		var shipper = this ;
		this._caches.load( fullpath, function(err,cache){

			if( !err && typeof cache.compiled=="undefined" )
			{
				shipper.compileJavascript(cache,path) ;
			}

			if(err)
			{
				var outerr = '"'+addslashes(err||"")+'"' ;
				var outdeps = 'null' ;
				var outdefine = 'null' ;

				rspn.statusCode = err.code || "404" ;
			}
			else
			{

				var outerr = 'null' ;
				var outdeps = JSON.stringify(cache.deps||[]) ;
				var outdefine = cache.compiled ;
			}

			var output = callwrapper.replace("$err",outerr) ;
			output = output.replace("$path",'"'+path+'"') ;
			output = output.replace("$deps",outdeps) ;

			// 直接使用 replace 函数，会受到 $&, $1-99 等形式字符串的干扰
			var pos = output.indexOf('$define') ;
			if(pos>=0)
			{
				output = output.substr(0,pos) + outdefine + output.substr(pos+7) ;
			}

			rspn.setHeader("Content-Type","application/javascript") ;
			rspn.write(output) ;
			rspn.end() ;
		} ) ;
	}

	else if( urlInfo.pathname.substr(0,19)=="/shipdown:template/" )
	{
		var path = urlInfo.pathname.substr(19) ;
		var fullpath = require.resolve(path) ;

		fs.readFile(fullpath,function(err,buff){

			rspn.setHeader("Content-Type","text/html") ;

			if(err)
			{
				rspn.statusCode = "404" ;
				rspn.write(err.toString()) ;
			}
			else
			{
				rspn.statusCode = "200" ;
				rspn.write( buff.toString() ) ;
			}

			rspn.end() ;
		}) ;
	}

	else
	{
		next() ;
		return ;
	}
}

module.exports.prototype.compileJavascript = function(cache,path)
{
	cache.compiled = "" ;
	cache.deps = [] ;

	var regexp = /(^|[^\.])require\s*\((.*?)\)/mg ;
	var res ;
	var lastIndex = 0 ;
	while( res=regexp.exec(cache.source) )
	{
		var res2 = res[2].match(/^\s*["']([^"']*?)["']\s*$/) ;

		// require 中使用变量
		if(!res2)
		{
			continue ;
		}

		// 检查模块是否有效
		if(res2[1][0]!=".")
		{
			try{
				var deppath = require.resolve(res2[1]) ;
				if(!deppath || deppath[0]!="/")
				{
					continue ;
				}
			} catch(e) {
				// 无法确定模块路径
				continue ;
			}
		}

		var tidypath = makePath(res2[1],path) ;
		cache.compiled+= cache.source.substring(lastIndex,res.index) + res[1]+"require(\"" + tidypath + "\")" ;
		lastIndex = regexp.lastIndex ;

		if( utilarr.search(cache.deps,tidypath)===false )
		{
			cache.deps.push(tidypath) ;
		}
	}

	cache.compiled+= cache.source.substring(lastIndex,cache.source.length) ;
	cache.compiled = "function(require,module,exports,__dirname,__filename){\r\n\r\n" + cache.compiled + "\r\n\r\n}" ;
}

var makePath = function(path,from){

	if(path[0]==".")
	{
		return _pt.normalize(_pt.dirname(from)+"/"+path) ;
	}
	else
	{
		return _pt.normalize(path) ;
	}
}

module.exports.prototype.registerAllowFolder = function(dirpath)
{
	this._arrAllowFolders.push(dirpath) ;
}

module.exports.prototype.registerAllowFilter = function(regexp)
{
	this._arrAllowPatterns.push(regexp) ;
}

module.exports.prototype.checkShippable = function(path,fullpath)
{
	for(var i=0;i<this._arrAllowFolders.length;i++)
	{
		if( fullpath.substr(0,this._arrAllowFolders[i].length) == this._arrAllowFolders[i] )
		{
			return true ;
		}
	}

	for(var i=0;i<this._arrAllowPatterns.length;i++)
	{
		if( this._arrAllowPatterns[i].constructor===RegExp && this._arrAllowPatterns[i].test(fullpath) )
		{
			return true ;
		}
		else if (typeof this._arrAllowPatterns[i]=="function" && this._arrAllowPatterns[i](fullpath))
		{
			return true ;
		}
	}

	return false ;
}

function Caches()
{
	var Platform = require("ocPlatform/lib/system/Platform.js") ;
	this.platformConfig = Platform.singleton? Platform.singleton.config: {} ;

	this._caches = {} ;
}

Caches.prototype.load = function(path,callback)
{
	if( typeof this._caches[path]=="undefined" )
	{
		this._caches[path] = {
			path: path
			, err: null
			, source: ""
			, loading: false
			, loaded: false
			, callbacks: []
		} ;
	}

	if( this._caches[path].loaded )
	{
		callback( this._caches[path].err, this._caches[path] ) ;
		return ;
	}

	this._caches[path].callbacks.push(callback) ;

	if( !this._caches[path].loading )
	{
		this._caches[path].loading = true ;
		var caches = this ;

		fs.readFile(path,function(err,buff){

			caches._caches[path].loading = false ;
			caches._caches[path].loaded = true ;

			caches._caches[path].err = err ;
			caches._caches[path].source = buff.toString() ;

			while(callback=caches._caches[path].callbacks.shift())
			{
				callback( caches._caches[path].err, caches._caches[path] ) ;
			}

			//
			if( caches.platformConfig.dev )
			{
				fs.unwatchFile(path) ;
				fs.watchFile(path,function(){
					console.log( (new Date).toISOString()+' Shipdown script has changed(auto reload): '+path ) ;
					delete caches._caches[path] ;
				}) ;
			}
		}) ;
	}
}


function addslashes(string)
{
	return string
		.replace(/[\\"']/g, '\\$&')
		.replace(/\u0000/g, '\\0') ;
}
