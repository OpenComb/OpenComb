
var Class = require("ocClass/lib/Class.js") ;
var _pt = require("path") ;
var fs = require("fs") ;
var http = require('http');
var IdManager = require('ocPlatform/lib/usr/IdManager.js');
var connect = require('connect') ;
var mongodb = require('mongodb');
var Router = require("./Router.js") ;
var ShipperServer = require("ocPlatform/lib/ship/ShipperServer.js") ;
var public = require("./middleware/public.js") ;


var Platform = module.exports = Class.extend({

	ctor: function(port,dbpath){

		var platform = this ;

		this._args = {
			port: port || this._args.port
			, dburl: dbpath || this._args.dburl
		}

		this.connect = null ;
		this.shipper = null ;
		this.router = null ;
		this.db = null ;


		this._loadExtensions(function (err,pubs){
			if(err)
			{
				throw err ;
			}
			platform
				._createConnect()				// 创建 connect
				._createShipper()				// 创建 shipper
				._createRouter()				// 创建路由

//			pubs.unshift({
//				root: __dirname+"/../../public"
//				, urlroot: "/ocPlatform"
//			}) ;
			for(var i=0;i<pubs.length;i++)
			{
				platform.connect.use(public(pubs[i].root,pubs[i].urlroot)) ;
			}

			platform._connetBaseMiddlewares = {
				"shipper": platform.shipper.connect_middleware.bind(platform.shipper)
				, "favicon": connect.favicon()
				, "cookieParser": connect.cookieParser()
				, "session": connect.session({ secret: 'opencomb platform', cookie: { maxAge: 1800000 } })
				, "idmgr": IdManager.connect_middleware
				, "router": platform.router.route.bind(platform.router)
				, "notfound": function(req,rspn){
					rspn.write("404") ;
					rspn.end() ;
				}
			}
			for(var name in platform._connetBaseMiddlewares)
			{
				platform._loadConnectBaseMiddleware(name) ;
			}
		})
	}

	, _connetBaseMiddlewares: {}

	, _loadConnectBaseMiddleware: function(name){
		this.connect.use( this._connetBaseMiddlewares[name] ) ;
	}

	, _createRouter:function(){
		this.router = new Router(this) ;
	}
	, _createShipper: function()
	{
		this.shipper = new ShipperServer() ;
		this.shipper.registerAllowFilter(function(path){
			// checking is view onRender script
			return path.match(/[\/\\]templates[\/\\]/)
				&& path.substr(-3).toLowerCase()==".js"
				&& fs.existsSync(require.resolve(path.substring(0,path.length-3)+".html"))
				;
		}) ;
		this.shipper.registerAllowFolder( _pt.dirname(require.resolve("ocHtmlParser/package.json"))+"/lib/" ) ;
		this.shipper.registerAllowFolder( _pt.dirname(require.resolve("ocTemplate/package.json"))+"/lib/" ) ;
		this.shipper.registerAllowFolder( _pt.dirname(require.resolve("stack-trace/package.json"))+"/lib/" ) ;
		return this ;
	}

	, _createConnect: function(pubs){
		this.connect = connect() ;
		return this ;
	}

	, _loadExtensions: function(callback){
		pubs = [] ;
		var modulesdir = process.cwd() + "/node_modules/" ;
		fs.readdir(modulesdir,function(err,files){
			if(err)
			{
				throw err ;
			}

			for(var i=0;i<files.length;i++)
			{
				var moddir = modulesdir + files[i] ;

				try{
					var packagejson = require( moddir + "/package.json" ) ;

					// 执行 onload 事件
					if( packagejson["ocext.onload"] )
					{
						var path = require.resolve(packagejson["ocext.onload"],moddir) ;
					}

				}catch(e){}

				if( fs.existsSync(moddir+"/public") )
				{
					pubs.push({
						root: moddir+"/public"
						, urlroot: "/"+files[i]
					}) ;
				}
			}

			callback(err,pubs) ;
		})
	}

	, _connectDatabase: function(callback){

		var platform = this ;

		(new mongodb.Db("opencomb",mongodb.Server("127.0.0.1", 27017, {}),{w:1}))
			.open(function(err,client){
				if(err)
				{
					throw error;
				}

				platform.db = {
					collection: function(name){
						return new mongodb.Collection(client,name) ;
					}
				} ;

				callback() ;
			}) ;
	}

	, _args: {
		port: 6060
		, dburl: "mongodb://localhost/opencomb"
	}

	, startup: function(callback){

		var platform = this ;

		this._connectDatabase(function(){

			http.createServer(platform.connect).listen(platform._args.port,function(err){
				if(callback)
				{
					callback(err) ;
				}
			});

		}) ;
	}

}) ;
