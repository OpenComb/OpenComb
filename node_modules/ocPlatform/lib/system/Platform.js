
var Class = require("ocClass/lib/Class.js") ;
var _pt = require("path") ;
var fs = require("fs") ;
var http = require('http');
var IdManager = require('ocPlatform/lib/usr/IdManager.js');
var connect = require('connect') ;
var mongodb = require('mongodb');
var Router = require("./Router.js") ;
var ShipperServer = require("ocPlatform/lib/ship/ShipperServer.js") ;
var public = require("./middleware/public.js") ;
var SessionStore = require("./SessionStore.js") ;


var Platform = module.exports = Class.extend({

	ctor: function(){

		var platform = this ;
		this.rootdir = process.cwd() ;

		this.connect = null ;
		this.shipper = null ;
		this.router = null ;
		this.db = null ;
		this.config = {} ;
		this.sessionStore = new SessionStore(this) ;

		this._loadExtensions(function (err,pubs){
			if(err)
			{
				throw err ;
			}
			platform
				._createConnect()				// 创建 connect
				._createShipper()				// 创建 shipper
				._createRouter()				// 创建路由

			for(var i=0;i<pubs.length;i++)
			{
				platform.connect.use(public(pubs[i].root,pubs[i].urlroot)) ;
			}

			platform._connetBaseMiddlewares = {
				"shipper": platform.shipper.connect_middleware.bind(platform.shipper)
				, "favicon": connect.favicon()
				, "cookie": connect.cookieParser()
				, "session": connect.session({ secret: 'opencomb platform', cookie: { maxAge: 1800000 }, store: platform.sessionStore })
				, "idmgr": IdManager.connect_middleware
				, "body": connect.bodyParser()
				, "router": platform.router.route.bind(platform.router)
				, "notfound": function(req,rspn){
					rspn.write("<h1>404</h1>") ;
					rspn.end() ;
				}
			}
			for(var name in platform._connetBaseMiddlewares)
			{
				platform._loadConnectBaseMiddleware(name) ;
			}
		})
	}

	, _connetBaseMiddlewares: {}

	, _loadConnectBaseMiddleware: function(name){
		this.connect.use( this._connetBaseMiddlewares[name] ) ;
	}

	, _createRouter:function(){
		this.router = new Router(this) ;
	}
	, _createShipper: function()
	{
		this.shipper = new ShipperServer() ;
		this.shipper.registerAllowFilter(function(path){
			// checking is view onRender script
			return path.match(/[\/\\]templates[\/\\]/)
				&& path.substr(-3).toLowerCase()==".js"
				&& fs.existsSync(require.resolve(path.substring(0,path.length-3)+".html"))
				;
		}) ;
		this.shipper.registerAllowFolder( _pt.dirname(require.resolve("ocHtmlParser/package.json"))+"/lib/" ) ;
		this.shipper.registerAllowFolder( _pt.dirname(require.resolve("ocTemplate/package.json"))+"/lib/" ) ;
		this.shipper.registerAllowFolder( _pt.dirname(require.resolve("stack-trace/package.json"))+"/lib/" ) ;
		return this ;
	}

	, _createConnect: function(pubs){
		this.connect = connect() ;
		return this ;
	}

	, _loadExtensions: function(callback){
		pubs = [] ;
		var modulesdir = process.cwd() + "/node_modules/" ;
		fs.readdir(modulesdir,function(err,files){
			if(err)
			{
				throw err ;
			}

			for(var i=0;i<files.length;i++)
			{
				var moddir = modulesdir + files[i] ;

				try{
					var packagejson = require( moddir + "/package.json" ) ;

					// 执行 onload 事件
					if( packagejson["ocext.onload"] )
					{
						var path = require.resolve(packagejson["ocext.onload"],moddir) ;
					}

				}catch(e){}

				if( fs.existsSync(moddir+"/public") )
				{
					pubs.push({
						root: moddir+"/public"
						, urlroot: "/"+files[i]+'/public'
					}) ;
				}
			}

			callback(err,pubs) ;
		})
	}

	, _loadStartupConfig: function(callback){
		this.config = require(this.rootdir+"/config.js") ;
		callback(null,this) ;
	}

	, _connectDatabase: function(callback){

		var platform = this ;

		if(!this.config.db || !this.config.db.server)
		{
			console.log("missing database configs") ;
			return ;
		}
		else
		{
			(new mongodb.Db("opencomb",mongodb.Server(this.config.db.server, this.config.db.port||27017, {}),{w:1}))
				.open(function(err,client){
					platform.db = client ;
					callback(err,this) ;
				}) ;
		}
	}

	, _createHttpPortServer: function(callback){
		var platform = this ;
		var port = this.config.server? (this.config.server.port || 6060): 6060 ;

		http.createServer(this.connect).listen(port,function(err){
			callback(err,platform) ;
		});
	}

	, startup: function(callback){
		var onestep, steps = [

			// 载入启动配置
			this._loadStartupConfig.bind(this)

			// 连接数据库
			, this._connectDatabase.bind(this)

			// 创建 http 端口服务器
			, this._createHttpPortServer.bind(this)

		] ;
		(function step(err)
		{
			if(err)
			{
				throw err ;
			}
			if( !(onestep=steps.shift()) )
			{
				// 完成
				callback(null,this) ;
			}
			else
			{
				onestep( arguments.callee )
			}
		}) () ;
	}
}) ;
